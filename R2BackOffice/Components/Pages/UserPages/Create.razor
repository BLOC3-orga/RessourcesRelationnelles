@page "/users/create"
@using R2Model.Entities
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Créer un nouvel utilisateur</PageTitle>

<h1>Créer un utilisateur</h1>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="userModel" OnValidSubmit="HandleValidSubmit" FormName="createUserForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="username">Nom d'utilisateur</label>
                <InputText id="username" @bind-Value="userModel.UserName" class="form-control" />
                <ValidationMessage For="@(() => userModel.UserName)" />
            </div>

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="userModel.Email" class="form-control" type="email" />
                <ValidationMessage For="@(() => userModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Mot de passe</label>
                <InputText id="password" @bind-Value="userModel.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => userModel.Password)" />
            </div>

            <div class="form-group mb-3">
                <label for="name">Prénom</label>
                <InputText id="name" @bind-Value="userModel.Name" class="form-control" />
                <ValidationMessage For="@(() => userModel.Name)" />
            </div>

            <div class="form-group mb-3">
                <label for="lastname">Nom</label>
                <InputText id="lastname" @bind-Value="userModel.LastName" class="form-control" />
                <ValidationMessage For="@(() => userModel.LastName)" />
            </div>

            <div class="form-group mb-3">
                <label for="pseudo">Pseudo</label>
                <InputText id="pseudo" @bind-Value="userModel.Pseudo" class="form-control" />
                <ValidationMessage For="@(() => userModel.Pseudo)" />
            </div>

            <div class="form-group mb-3">
                <label for="city">Ville</label>
                <InputText id="city" @bind-Value="userModel.City" class="form-control" />
                <ValidationMessage For="@(() => userModel.City)" />
            </div>

            <div class="form-group mb-3">
                <label for="address">Adresse</label>
                <InputText id="address" @bind-Value="userModel.Address" class="form-control" />
                <ValidationMessage For="@(() => userModel.Address)" />
            </div>

            <div class="form-group mb-3">
                <label for="roleId">Rôle</label>
                <InputSelect id="roleId" @bind-Value="userModel.RoleId" class="form-control">
                    @if (roles != null)
                    {
                        @foreach (var role in roles)
                        {
                            <option value="@role.Id">@role.Label</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => userModel.RoleId)" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox id="isActivated" @bind-Value="userModel.IsAccountActivated" class="form-check-input" />
                <label class="form-check-label" for="isActivated">Compte activé</label>
            </div>

            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">Créer</button>
                <a href="/users" class="btn btn-secondary">Retour à la liste</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UserModel userModel = new UserModel();
    private List<Role>? roles;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charger les rôles depuis l'API
            roles = await Http.GetFromJsonAsync<List<Role>>("api/Roles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des rôles: {ex.Message}");
            roles = new List<Role>();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var user = new User
                {
                    UserName = userModel.UserName,
                    Email = userModel.Email,
                    Name = userModel.Name,
                    LastName = userModel.LastName,
                    Pseudo = userModel.Pseudo,
                    City = userModel.City,
                    Address = userModel.Address,
                    IsAccountActivated = userModel.IsAccountActivated,
                    RoleId = userModel.RoleId
                };

            var response = await Http.PostAsJsonAsync($"api/Users?password={userModel.Password}", user);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/users");
            }
            else
            {
                // Gestion des erreurs
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erreur lors de la création de l'utilisateur: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    // Classe modèle pour le formulaire
    public class UserModel
    {
        [Required(ErrorMessage = "Le nom d'utilisateur est requis")]
        public string UserName { get; set; } = string.Empty;

        [Required(ErrorMessage = "L'email est requis")]
        [EmailAddress(ErrorMessage = "Format d'email invalide")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le mot de passe est requis")]
        [StringLength(100, ErrorMessage = "Le mot de passe doit comporter au moins {2} caractères", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le prénom est requis")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le nom est requis")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le pseudo est requis")]
        public string Pseudo { get; set; } = string.Empty;

        public string City { get; set; } = string.Empty;

        public string Address { get; set; } = string.Empty;

        public int RoleId { get; set; }

        public bool IsAccountActivated { get; set; } = true;
    }
}