@page "/users/edit/{UserId:int}"

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using R2Model.Entities

@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole<int>> RoleManager
@inject NavigationManager NavigationManager
@inject ILogger<Edit> Logger

<h1>Modifier l'utilisateur</h1>

@if (IsLoading)
{
    <p><em>Chargement...</em></p>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@((MarkupString)ErrorMessage)</p>
}
else if (Model == null)
{
    <p class="text-danger">Utilisateur introuvable.</p>
}
else
{
    <EditForm Model="@Model" OnValidSubmit="UpdateUserAsync" FormName="editUserForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Nom</label>
            <InputText @bind-Value="Model.Name" class="form-control" />
        </div>
        <div>
            <label>Prénom</label>
            <InputText @bind-Value="Model.LastName" class="form-control" />
        </div>
        <div>
            <label>Pseudo</label>
            <InputText @bind-Value="Model.Pseudo" class="form-control" />
        </div>
        <div>
            <label>Ville</label>
            <InputText @bind-Value="Model.City" class="form-control" />
        </div>
        <div>
            <label>Adresse</label>
            <InputText @bind-Value="Model.Address" class="form-control" />
        </div>

        <div>
            <label>Rôle</label>
            <InputSelect @bind-Value="SelectedRole" class="form-select">
                @foreach (var role in Roles)
                {
                    <option value="@role.Name">@role.Name</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary mt-3">Enregistrer</button>

        @if (IsSuccess)
        {
            <p class="text-success mt-2">Utilisateur mis à jour avec succès.</p>
        }
    </EditForm>
}

@code {
    [Parameter]
    public int UserId { get; set; }

    private User? Model;
    private List<IdentityRole<int>> Roles = new();
    private string SelectedRole = string.Empty;
    private bool IsLoading = true;
    private string ErrorMessage = string.Empty;
    private bool IsSuccess = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Roles = await RoleManager.Roles.ToListAsync();
            Model = await UserManager.FindByIdAsync(UserId.ToString());

            if (Model != null)
            {
                var userRoles = await UserManager.GetRolesAsync(Model);
                SelectedRole = userRoles.FirstOrDefault() ?? Roles.FirstOrDefault()?.Name ?? string.Empty;

                Logger.LogInformation($"Utilisateur chargé : {Model.Name} {Model.LastName}, rôle actuel : {SelectedRole}");
            }
            else
            {
                ErrorMessage = "Utilisateur introuvable.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors du chargement de l'utilisateur");
            ErrorMessage = "Une erreur est survenue lors du chargement.";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task UpdateUserAsync()
    {
        ErrorMessage = string.Empty;
        IsSuccess = false;

        if (Model == null)
        {
            ErrorMessage = "Utilisateur non chargé.";
            return;
        }

        try
        {
            Logger.LogInformation("Début de la mise à jour de l'utilisateur.");
            Logger.LogInformation($"Valeurs du modèle : Name = {Model.Name}, LastName = {Model.LastName}, Pseudo = {Model.Pseudo}");

            var userInDb = await UserManager.FindByIdAsync(Model.Id.ToString());
            if (userInDb == null)
            {
                ErrorMessage = "Utilisateur introuvable en base.";
                return;
            }

            userInDb.Name = Model.Name;
            userInDb.LastName = Model.LastName;
            userInDb.Pseudo = Model.Pseudo;
            userInDb.City = Model.City;
            userInDb.Address = Model.Address;

            var updateResult = await UserManager.UpdateAsync(userInDb);
            if (!updateResult.Succeeded)
            {
                ErrorMessage = string.Join("<br/>", updateResult.Errors.Select(e => e.Description));
                return;
            }

            // Mise à jour des rôles
            var currentRoles = await UserManager.GetRolesAsync(userInDb);
            var removeResult = await UserManager.RemoveFromRolesAsync(userInDb, currentRoles);
            if (!removeResult.Succeeded)
            {
                ErrorMessage = string.Join("<br/>", removeResult.Errors.Select(e => e.Description));
                return;
            }

            var addRoleResult = await UserManager.AddToRoleAsync(userInDb, SelectedRole);
            if (!addRoleResult.Succeeded)
            {
                ErrorMessage = string.Join("<br/>", addRoleResult.Errors.Select(e => e.Description));
                return;
            }

            IsSuccess = true;
            Logger.LogInformation("Mise à jour de l'utilisateur réussie.");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors de la mise à jour de l'utilisateur");
            ErrorMessage = "Une erreur est survenue lors de la mise à jour.";
        }
    }
}
