@page "/users/edit"
@using R2Model.Entities
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Modifier l'utilisateur</PageTitle>

<h1>Modifier l'utilisateur</h1>

@if (loading)
{
    <p><em>Chargement en cours...</em></p>
}
else if (userModel != null)
{
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="userModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="username">Nom d'utilisateur</label>
                    <InputText id="username" @bind-Value="userModel.UserName" class="form-control" disabled />
                </div>

                <div class="form-group mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="userModel.Email" class="form-control" disabled />
                </div>

                <div class="form-group mb-3">
                    <label for="name">Prénom</label>
                    <InputText id="name" @bind-Value="userModel.Name" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Name)" />
                </div>

                <div class="form-group mb-3">
                    <label for="lastname">Nom</label>
                    <InputText id="lastname" @bind-Value="userModel.LastName" class="form-control" />
                    <ValidationMessage For="@(() => userModel.LastName)" />
                </div>

                <div class="form-group mb-3">
                    <label for="pseudo">Pseudo</label>
                    <InputText id="pseudo" @bind-Value="userModel.Pseudo" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Pseudo)" />
                </div>

                <div class="form-group mb-3">
                    <label for="city">Ville</label>
                    <InputText id="city" @bind-Value="userModel.City" class="form-control" />
                    <ValidationMessage For="@(() => userModel.City)" />
                </div>

                <div class="form-group mb-3">
                    <label for="address">Adresse</label>
                    <InputText id="address" @bind-Value="userModel.Address" class="form-control" />
                    <ValidationMessage For="@(() => userModel.Address)" />
                </div>

                <div class="form-group mb-3">
                    <label for="roleId">Rôle</label>
                    <InputSelect id="roleId" @bind-Value="userModel.RoleId" class="form-control">
                        @if (roles != null)
                        {
                            @foreach (var role in roles)
                            {
                                <option value="@role.Id">@role.Label</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => userModel.RoleId)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox id="isActivated" @bind-Value="userModel.IsAccountActivated" class="form-check-input" />
                    <label class="form-check-label" for="isActivated">Compte activé</label>
                </div>

                <div class="form-group mt-4">
                    <button type="submit" class="btn btn-primary">Enregistrer</button>
                    <a href="@($"users/details?id={Id}")" class="btn btn-info">Détails</a>
                    <a href="/users" class="btn btn-secondary">Retour à la liste</a>
                </div>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">
        Utilisateur non trouvé
    </div>
    <a href="/users" class="btn btn-secondary">Retour à la liste</a>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? Id { get; set; }

    private UserModel? userModel;
    private List<Role>? roles;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo("/users");
            return;
        }

        try
        {
            // Charger l'utilisateur depuis l'API
            var user = await Http.GetFromJsonAsync<User>($"api/Users/{Id}");

            if (user != null)
            {
                userModel = new UserModel
                    {
                        Id = user.Id,
                        UserName = user.UserName ?? string.Empty,
                        Email = user.Email ?? string.Empty,
                        Name = user.Name,
                        LastName = user.LastName,
                        Pseudo = user.Pseudo,
                        City = user.City,
                        Address = user.Address,
                        RoleId = user.RoleId,
                        IsAccountActivated = user.IsAccountActivated
                    };
            }

            // Charger les rôles depuis l'API
            roles = await Http.GetFromJsonAsync<List<Role>>("api/Roles");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des données: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (userModel == null) return;

        try
        {
            // Créer un objet User à partir du modèle
            var user = new User
                {
                    Id = userModel.Id,
                    UserName = userModel.UserName,
                    Email = userModel.Email,
                    Name = userModel.Name,
                    LastName = userModel.LastName,
                    Pseudo = userModel.Pseudo,
                    City = userModel.City,
                    Address = userModel.Address,
                    RoleId = userModel.RoleId,
                    IsAccountActivated = userModel.IsAccountActivated
                };

            // Appeler l'API pour mettre à jour l'utilisateur
            var response = await Http.PutAsJsonAsync($"api/Users/{Id}", user);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo($"/users/details?id={Id}");
            }
            else
            {
                // Gestion des erreurs
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Erreur lors de la mise à jour de l'utilisateur: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    // Classe modèle pour le formulaire
    public class UserModel
    {
        public string Id { get; set; } = string.Empty;

        public string UserName { get; set; } = string.Empty;

        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le prénom est requis")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le nom est requis")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le pseudo est requis")]
        public string Pseudo { get; set; } = string.Empty;

        public string City { get; set; } = string.Empty;

        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le rôle est requis")]
        public int RoleId { get; set; }

        public bool IsAccountActivated { get; set; } = true;
    }
}