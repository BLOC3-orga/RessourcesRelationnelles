@page "/resources/create"
@using Microsoft.EntityFrameworkCore
@using R2Model.Entities
@using R2Model.Enums
@inject IDbContextFactory<R2Model.Context.R2DbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Resource</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Resource" OnValidSubmit="AddResource" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Resource.Name" class="form-control" />
                <ValidationMessage For="@(() => Resource.Name)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText id="description" @bind-Value="Resource.Description" class="form-control" />
                <ValidationMessage For="@(() => Resource.Description)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="creationdate" class="form-label">CreationDate:</label>
                <InputDate id="creationdate" @bind-Value="Resource.CreationDate" class="form-control" />
                <ValidationMessage For="@(() => Resource.CreationDate)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="type" class="form-label">Type:</label>
                <InputSelect id="type" @bind-Value="Resource.Type" class="form-control">
                    @foreach (ResourceType type in Enum.GetValues(typeof(ResourceType)))
                    {
                        <option value="@type">@GetResourceTypeDisplayName(type)</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Resource.Type)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label>
                <InputSelect id="status" @bind-Value="Resource.Status" class="form-control">
                    @foreach (ResourceStatus status in Enum.GetValues(typeof(ResourceStatus)))
                    {
                        <option value="@status">@GetResourceStatusDisplayName(status)</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Resource.Status)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="categoryid" class="form-label">CategoryId:</label>
                <InputSelect id="categoryid" @bind-Value="Resource.CategoryId" class="form-control">
                    @if (Categories != null)
                    {
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => Resource.CategoryId)" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/resources">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Resource Resource { get; set; } = new() { CreationDate = DateTime.Now };

    private List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Categories = await context.Categories.ToListAsync();

        // Initialiser avec des valeurs par défaut si nécessaire
        if (Resource.Status == 0)
            Resource.Status = ResourceStatus.Private;

        if (Resource.Type == 0)
            Resource.Type = ResourceType.Activity;
    }

    private string GetResourceTypeDisplayName(ResourceType type)
    {
        return type switch
        {
            ResourceType.Activity => "Activité",
            ResourceType.Game => "Jeu",
            ResourceType.Document => "Document",
            _ => type.ToString()
        };
    }

    private string GetResourceStatusDisplayName(ResourceStatus status)
    {
        return status switch
        {
            ResourceStatus.Private => "Privé",
            ResourceStatus.Public => "Public",
            ResourceStatus.Draft => "Brouillon",
            _ => status.ToString()
        };
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddResource()
    {
        using var context = DbFactory.CreateDbContext();
        context.Ressources.Add(Resource);  // Correction : Ressources -> Resources
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/resources");
    }
}