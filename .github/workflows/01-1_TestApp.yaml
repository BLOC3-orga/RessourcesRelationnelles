name: 01-1 - Test Application

on:
  workflow_call

jobs:
  TestDotNet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run Unit Tests
        run: |
          dotnet test R2.Tests/R2.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --filter "Category!=Integration"

      - name: Run Integration Tests (In-Memory DB)
        run: |
          dotnet test R2.Tests/R2.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=integration-test-results.trx" \
            --filter "Category=Integration|FullyQualifiedName~IntegrationTests"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-coverage-report
          path: ./coverage
          retention-days: 3

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: "**/integration-test-results.trx"

  TestE2E_Fast:
    runs-on: ubuntu-latest
    needs: TestDotNet
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: E2E Tests with SQLite
        run: |
          echo "🚀 Starting E2E tests with SQLite (fast)..."
          
          # Utiliser SQLite pour les tests E2E rapides
          export ConnectionStrings__DefaultConnection="Data Source=:memory:"
          export ASPNETCORE_ENVIRONMENT="Testing"
          export ASPNETCORE_HTTP_PORTS="5000"
          
          dotnet build --configuration Release
          dotnet run --project R2.UI/R2.UI.csproj --configuration Release --urls "http://localhost:5000" &
          APP_PID=$!
          
          # Attendre le démarrage (plus rapide avec SQLite)
          for i in {1..20}; do
            if curl -s http://localhost:5000/ > /dev/null 2>&1; then
              echo "✅ App ready in ${i} attempts!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "❌ App failed to start"
              exit 1
            fi
            sleep 2
          done
          
          # Tests E2E basiques
          echo "🧪 Running E2E tests..."
          curl -f http://localhost:5000/ || (echo "❌ Homepage failed" && exit 1)
          
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:5000/)
          echo "✅ Response time: ${RESPONSE_TIME}s"
          
          # Test de charge basique
          for j in {1..10}; do
            curl -s http://localhost:5000/ > /dev/null || (echo "❌ Load test failed" && exit 1)
          done
          echo "✅ Load test passed"
          
          # Arrêter l'app
          kill $APP_PID 2>/dev/null || true
          
          echo "🎉 Fast E2E tests completed!"

  TestE2E_SQL:
    runs-on: ubuntu-latest
    needs: TestE2E_Fast
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: E2E Tests with SQL Server (full)
        env:
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'TestPassword123!' }}
        run: |
          echo "🚀 Starting comprehensive E2E tests with SQL Server..."
          
          # Démarrer SQL Server
          docker run -d \
            --name r2_database_test \
            -e SA_PASSWORD="${DB_PASSWORD}" \
            -e ACCEPT_EULA=Y \
            -e MSSQL_PID=Express \
            -p 1434:1433 \
            mcr.microsoft.com/mssql/server:2022-latest
          
          # Attendre SQL Server avec timeout augmenté
          for i in {1..40}; do
            if docker exec r2_database_test /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${DB_PASSWORD}" -Q "SELECT 1" &> /dev/null; then
              echo "✅ Database ready in ${i} attempts!"
              break
            fi
            if [ $i -eq 40 ]; then
              echo "❌ Database timeout"
              docker logs r2_database_test
              exit 1
            fi
            echo "DB attempt $i/40..."
            sleep 15
          done
          
          # Démarrer l'app avec SQL Server
          export ConnectionStrings__DefaultConnection="Server=localhost,1434;Database=RessourcesRelationnelles;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=true;"
          export ASPNETCORE_ENVIRONMENT="Testing"
          export ASPNETCORE_HTTP_PORTS="5001"
          
          dotnet run --project R2.UI/R2.UI.csproj --configuration Release --urls "http://localhost:5001" &
          APP_PID=$!
          
          # Attendre l'app
          for i in {1..30}; do
            if curl -s http://localhost:5001/ > /dev/null 2>&1; then
              echo "✅ App with SQL Server ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ App timeout"
              exit 1
            fi
            sleep 3
          done
          
          # Tests avec vraie DB
          echo "🧪 Testing with real SQL Server..."
          curl -f http://localhost:5001/ || (echo "❌ SQL Server test failed" && exit 1)
          echo "✅ SQL Server E2E test passed!"
          
          # Nettoyage
          kill $APP_PID 2>/dev/null || true
          docker stop r2_database_test && docker rm r2_database_test