name: 01-1 - Test Application

on:
  workflow_call

jobs:
  TestDotNet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run Unit Tests
        run: |
          dotnet test R2.Tests/R2.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./coverage \
            --filter "Category!=Integration"

      - name: Run Integration Tests
        run: |
          dotnet test R2.Tests/R2.Tests.csproj \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=integration-test-results.trx" \
            --filter "Category=Integration|FullyQualifiedName~IntegrationTests"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-coverage-report
          path: ./coverage
          retention-days: 3

      - name: Upload Integration Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: "**/integration-test-results.trx"

  TestE2E:
    runs-on: ubuntu-latest
    needs: TestDotNet
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Start SQL Server container
        env:
          # Utilise le secret si défini, sinon mot de passe par défaut pour les tests
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'TestPassword123!' }}
        run: |
          docker run -d \
            --name r2_database_test \
            -e SA_PASSWORD="${DB_PASSWORD}" \
            -e ACCEPT_EULA=Y \
            -e MSSQL_PID=Express \
            -p 1434:1433 \
            mcr.microsoft.com/mssql/server:2022-latest
          
          echo "⏳ Waiting for database to be ready..."
          
          # Attendre que SQL Server soit prêt avec de meilleurs logs
          for i in {1..20}; do
            if docker exec r2_database_test /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${DB_PASSWORD}" -Q "SELECT 1" &> /dev/null; then
              echo "✅ Database is ready!"
              break
            fi
            if [ $i -eq 20 ]; then
              echo "❌ Database failed to start in time"
              echo "=== Container logs ==="
              docker logs r2_database_test
              exit 1
            fi
            echo "Attempt $i/20 - waiting 15s..."
            sleep 15
          done

      - name: Build and Start Application
        env:
          DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD || 'TestPassword123!' }}
        run: |
          export ConnectionStrings__DefaultConnection="Server=localhost,1434;Database=RessourcesRelationnelles;User Id=sa;Password=${DB_PASSWORD};TrustServerCertificate=true;"
          export ASPNETCORE_ENVIRONMENT="Testing"
          export ASPNETCORE_HTTP_PORTS="5000"
          
          dotnet build --configuration Release
          dotnet run --project R2.UI/R2.UI.csproj --configuration Release --urls "http://localhost:5000" &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          
          echo "⏳ Waiting for app to start..."
          for i in {1..60}; do
            if curl -s http://localhost:5000/ > /dev/null 2>&1; then
              echo "✅ App is ready!"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ App failed to start in time"
              echo "=== Process status ==="
              ps aux | grep dotnet || echo "No dotnet processes found"
              exit 1
            fi
            echo "Attempt $i/60 - waiting 2s..."
            sleep 2
          done

      - name: Run Basic E2E Tests
        run: |
          echo "🧪 Running E2E tests..."
          
          # Test homepage accessibility
          echo "Testing homepage..."
          curl -f http://localhost:5000/ || (echo "❌ Homepage test failed" && exit 1)
          
          # Test login page (non-bloquant)
          echo "Testing login page..."
          if curl -s http://localhost:5000/login > /dev/null 2>&1; then
            echo "✅ Login page accessible"
          else
            echo "ℹ️ Login page not accessible via GET (normal for Blazor)"
          fi
          
          # Test register page (non-bloquant)
          echo "Testing register page..."
          if curl -s http://localhost:5000/register > /dev/null 2>&1; then
            echo "✅ Register page accessible"
          else
            echo "ℹ️ Register page not accessible via GET (normal for Blazor)"
          fi
          
          # Test response time
          echo "Testing response time..."
          RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:5000/)
          echo "Response time: ${RESPONSE_TIME}s"
          
          if (( $(echo "$RESPONSE_TIME > 5.0" | bc -l) )); then
            echo "⚠️ Response time is slow but acceptable for tests: ${RESPONSE_TIME}s"
          else
            echo "✅ Response time is good: ${RESPONSE_TIME}s"
          fi
          
          # Test que l'application répond bien au format HTML
          echo "Testing content type..."
          CONTENT_TYPE=$(curl -s -I http://localhost:5000/ | grep -i content-type)
          echo "Content-Type: $CONTENT_TYPE"
          
          echo "✅ All E2E tests passed!"

      - name: Show logs on failure
        if: failure()
        run: |
          echo "=== Application Process ==="
          ps aux | grep dotnet || echo "No dotnet processes running"
          
          echo "=== Docker Container Status ==="
          docker ps -a
          
          echo "=== Docker Container Logs ==="
          docker logs r2_database_test || echo "No container logs available"
          
          echo "=== Network Status ==="
          netstat -tlnp | grep :5000 || echo "Port 5000 not listening"
          netstat -tlnp | grep :1434 || echo "Port 1434 not listening"

      - name: Stop Application
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            echo "Stopping application (PID: $APP_PID)"
            kill $APP_PID 2>/dev/null || true
            sleep 5
            kill -9 $APP_PID 2>/dev/null || true
          fi

      - name: Clean Docker
        if: always()
        run: |
          echo "🧹 Cleaning up Docker resources..."
          docker stop r2_database_test 2>/dev/null || true
          docker rm r2_database_test 2>/dev/null || true
          docker system prune -f || true