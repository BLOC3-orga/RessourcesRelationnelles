name: 02-1 - Docker Build & Security

on:
  workflow_call:
  # ✅ Suppression de la déclaration explicite de GITHUB_TOKEN
  # GITHUB_TOKEN est automatiquement disponible dans tous les workflows

env:
  REGISTRY: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  Security_Check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run dependency audit
        run: |
          echo "🔍 Checking for vulnerable packages..."
          dotnet list package --vulnerable --include-transitive || echo "ℹ️ No vulnerable packages found"

  Dockerbuild:
    needs: [Security_Check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Registry Login
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }}  # ✅ Utilisation directe du token système

      - name: Downcase IMAGE Name
        run: |
          echo "IMAGE_NAME_LOWER=${GITHUB_REPOSITORY,,}" >> ${GITHUB_ENV}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-

      - name: Build and Push RessourcesRelationnelles App
        uses: docker/build-push-action@v5
        with:
          context: .
          file: R2.UI/Dockerfile  # ✅ Adapté pour votre projet R2
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:main-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME_LOWER }}:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Build Summary
        run: |
          echo "## 🐳 Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.IMAGE_NAME_LOWER }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: latest, main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ✅ Completed with Trivy" >> $GITHUB_STEP_SUMMARY