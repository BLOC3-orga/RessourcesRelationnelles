@page "/register"
@using Microsoft.AspNetCore.Identity
@using R2.Data.Entities
@using System.ComponentModel.DataAnnotations
@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject ILogger<Register> Logger

<PageTitle>Inscription</PageTitle>

<h1>Créer un nouveau compte</h1>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@registerModel" OnValidSubmit="RegisterUser" FormName="registerForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="registerModel.Email" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group mb-3">
                <label for="name">Prénom</label>
                <InputText id="name" @bind-Value="registerModel.Name" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Name)" />
            </div>

            <div class="form-group mb-3">
                <label for="lastName">Nom</label>
                <InputText id="lastName" @bind-Value="registerModel.LastName" class="form-control" />
                <ValidationMessage For="@(() => registerModel.LastName)" />
            </div>

            <div class="form-group mb-3">
                <label for="pseudo">Pseudo</label>
                <InputText id="pseudo" @bind-Value="registerModel.Pseudo" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Pseudo)" />
            </div>

            <div class="form-group mb-3">
                <label for="city">Ville</label>
                <InputText id="city" @bind-Value="registerModel.City" class="form-control" />
                <ValidationMessage For="@(() => registerModel.City)" />
            </div>

            <div class="form-group mb-3">
                <label for="address">Adresse</label>
                <InputText id="address" @bind-Value="registerModel.Address" class="form-control" />
                <ValidationMessage For="@(() => registerModel.Address)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Mot de passe</label>
                <InputText id="password" @bind-Value="registerModel.Password" class="form-control" type="password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
                <small class="form-text text-muted">
                    Le mot de passe doit contenir au moins 8 caractères, incluant une majuscule, une minuscule,
                    un chiffre et un caractère spécial.
                </small>
            </div>

            <div class="form-group mb-3">
                <label for="confirmPassword">Confirmer le mot de passe</label>
                <InputText id="confirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary">S'inscrire</button>
        </EditForm>

        <div class="mt-3">
            <p>Vous avez déjà un compte? <a href="login">Se connecter</a></p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-3">
                @errorMessage
            </div>
        }
    </div>
</div>

@code {
    private RegisterModel registerModel = new();
    private string errorMessage = string.Empty;

    public class RegisterModel
    {
        [Required(ErrorMessage = "L'adresse email est requise")]
        [EmailAddress(ErrorMessage = "Format d'email invalide")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le prénom est requis")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le nom est requis")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le pseudo est requis")]
        public string Pseudo { get; set; } = string.Empty;

        public string City { get; set; } = string.Empty;

        public string Address { get; set; } = string.Empty;

        [Required(ErrorMessage = "Le mot de passe est requis")]
        [StringLength(100, ErrorMessage = "Le {0} doit faire au moins {2} caractères et au maximum {1} caractères.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "Les mots de passe ne correspondent pas.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private async Task RegisterUser()
    {
        try
        {
            Logger.LogInformation("Tentative d'inscription pour {Email}", registerModel.Email);

            var user = new User
                {
                    UserName = registerModel.Email,
                    Email = registerModel.Email,
                    Name = registerModel.Name,
                    LastName = registerModel.LastName,
                    Pseudo = registerModel.Pseudo,
                    City = registerModel.City,
                    Address = registerModel.Address
                };

            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                Logger.LogInformation("Utilisateur créé avec succès");
                await SignInManager.SignInAsync(user, isPersistent: false);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Logger.LogWarning("Échec de la création de l'utilisateur: {Errors}",
                    string.Join(", ", result.Errors.Select(e => e.Description)));
                errorMessage = string.Join(", ", result.Errors.Select(x => x.Description));
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Exception lors de l'inscription");
            errorMessage = $"Une erreur est survenue: {ex.Message}";
            StateHasChanged();
        }
    }
}