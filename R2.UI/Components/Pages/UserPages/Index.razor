@page "/users"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using R2.Data.Entities
@using R2.Data.Context
@using Microsoft.AspNetCore.Identity
@implements IAsyncDisposable
@inject IDbContextFactory<R2.Data.Context.R2DbContext> DbFactory
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole<int>> RoleManager
<PageTitle>Liste des utilisateurs</PageTitle>
<h1>Liste des utilisateurs</h1>
<p>
    <a href="users/create" class="btn btn-primary">Create New</a>
</p>
@if (isLoading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    <QuickGrid Class="table table-striped table-hover" Items="@usersWithRolesQueryable">
        <PropertyColumn Property="user => user.Id" Title="ID" />
        <PropertyColumn Property="user => user.Name" Title="Prénom" />
        <PropertyColumn Property="user => user.LastName" Title="Nom" />
        <PropertyColumn Property="user => user.Pseudo" Title="Pseudo" />
        <PropertyColumn Property="user => user.Email" Title="Email" />
        <PropertyColumn Property="user => user.City" Title="Ville" />
        <TemplateColumn Title="Rôle">
            <span class="badge rounded-pill bg-info">@context.Role</span>
        </TemplateColumn>
        <TemplateColumn Title="Compte activé">
            @if (context.User.IsAccountActivated)
            {
                <span class="badge rounded-pill bg-success">Activé</span>
            }
            else
            {
                <span class="badge rounded-pill bg-danger">Désactivé</span>
            }
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <div class="btn-group">
                <a href="@($"users/edit?id={context.User.Id}")" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-pencil"></i> Edit
                </a>
                <a href="@($"users/details?id={context.User.Id}")" class="btn btn-sm btn-outline-info">
                    <i class="bi bi-info-circle"></i> Details
                </a>
                <a href="@($"users/delete?id={context.User.Id}")" class="btn btn-sm btn-outline-danger">
                    <i class="bi bi-trash"></i> Delete
                </a>
            </div>
        </TemplateColumn>
    </QuickGrid>
}
@code {
    private R2DbContext context = default!;
    private bool isLoading = true;
    private List<UserWithRole> usersWithRoles = new List<UserWithRole>();
    private IQueryable<UserWithRole> usersWithRolesQueryable => usersWithRoles.AsQueryable();

    // Classe pour stocker les informations utilisateur avec son rôle
    private class UserWithRole
    {
        public User User { get; set; } = default!;
        public string Role { get; set; } = string.Empty;
        public int Id => User.Id;
        public string Name => User.Name;
        public string LastName => User.LastName;
        public string Pseudo => User.Pseudo;
        public string Email => User.Email ?? string.Empty;
        public string City => User.City ?? string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            context = DbFactory.CreateDbContext();
            // Charger les utilisateurs
            var users = await context.Users.ToListAsync();
            // Récupérer le rôle de chaque utilisateur
            foreach (var user in users)
            {
                var roles = await UserManager.GetRolesAsync(user);
                var role = roles.FirstOrDefault() ?? "Aucun rôle";
                usersWithRoles.Add(new UserWithRole
                    {
                        User = user,
                        Role = role
                    });
            }
        }
        catch (Exception)
        {
            // Gérer les erreurs
        }
        finally
        {
            isLoading = false;
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}