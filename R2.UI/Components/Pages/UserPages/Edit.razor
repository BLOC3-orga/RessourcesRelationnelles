@page "/users/edit"
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using R2.Data.Entities
@inject IDbContextFactory<R2.Data.Context.R2DbContext> DbFactory
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager
@inject RoleManager<IdentityRole<int>> RoleManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>User</h2>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="User.Id" value="@User.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="User.Name" class="form-control" />
                    <ValidationMessage For="() => User.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="User.LastName" class="form-control" />
                    <ValidationMessage For="() => User.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="pseudo" class="form-label">Pseudo:</label>
                    <InputText id="pseudo" @bind-Value="User.Pseudo" class="form-control" />
                    <ValidationMessage For="() => User.Pseudo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="city" class="form-label">City:</label>
                    <InputText id="city" @bind-Value="User.City" class="form-control" />
                    <ValidationMessage For="() => User.City" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="User.Address" class="form-control" />
                    <ValidationMessage For="() => User.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isaccountactivated" class="form-label">IsAccountActivated:</label>
                    <InputCheckbox id="isaccountactivated" @bind-Value="User.IsAccountActivated" class="form-check-input" />
                    <ValidationMessage For="() => User.IsAccountActivated" class="text-danger" />
                </div>
                
               <!-- <div class="mb-3">
                    <label for="role" class="form-label">Rôle:</label>
                    <InputSelect id="role" @bind-Value="SelectedRole" class="form-select">
                        @foreach (var role in AvailableRoles)
                        {
                           // <option value="@role.Name">@role.Name</option>
                        }
                    </InputSelect>
                 </div>-->
                
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private User? User { get; set; }
    
    // Propriétés pour gérer les rôles
    private List<IdentityRole<int>> AvailableRoles = new();
    private string SelectedRole = string.Empty;
    private string OriginalRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        User ??= await context.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }
        
        // Charger les rôles disponibles
     //   AvailableRoles = await RoleManager.Roles.ToListAsync();
        
        // Déterminer le rôle actuel de l'utilisateur
     /*   var userRoles = await UserManager.GetRolesAsync(User);
        SelectedRole = userRoles.FirstOrDefault() ?? AvailableRoles.FirstOrDefault()?.Name ?? string.Empty;
        OriginalRole = SelectedRole; // Stocker le rôle original pour le comparer plus tard

        Console.WriteLine($"Utilisateur chargé: {User.Name} {User.LastName}, rôle actuel: {SelectedRole}");*/
    }

    private async Task UpdateUser()
    {
        // 1. Mettre à jour les informations de base de l'utilisateur
        using var context = DbFactory.CreateDbContext();

        var userInDb = await context.Users.FindAsync(User!.Id);

        if (userInDb == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        Console.WriteLine($"Mise à jour de l'utilisateur {userInDb.Id}:");
        Console.WriteLine($"Ancien: {userInDb.Name}, {userInDb.LastName}, {userInDb.Pseudo}, {userInDb.City}, {userInDb.Address}");
        Console.WriteLine($"Nouveau: {User.Name}, {User.LastName}, {User.Pseudo}, {User.City}, {User.Address}");
    //    Console.WriteLine($"Rôle original: {OriginalRole}, Nouveau rôle: {SelectedRole}");

        userInDb.Name = User.Name;
        userInDb.LastName = User.LastName;
        userInDb.Pseudo = User.Pseudo;
        userInDb.City = User.City;
        userInDb.Address = User.Address;
        userInDb.IsAccountActivated = User.IsAccountActivated;

        try
        {
            await context.SaveChangesAsync();
            Console.WriteLine("Modifications des données de base enregistrées avec succès");
            
           /* if (SelectedRole != OriginalRole)
            {
                Console.WriteLine($"Mise à jour du rôle: {OriginalRole} -> {SelectedRole}");

                var userForRole = await UserManager.FindByIdAsync(User.Id.ToString());

                if (userForRole != null)
                {
                    if (!string.IsNullOrEmpty(OriginalRole))
                    {
                        await UserManager.RemoveFromRoleAsync(userForRole, OriginalRole);
                        }

                    if (!string.IsNullOrEmpty(SelectedRole))
                    {
                        await UserManager.AddToRoleAsync(userForRole, SelectedRole);
                        }

                    Console.WriteLine("Modification du rôle enregistrée avec succès");
                    }
                else
                {
                    Console.WriteLine("Utilisateur non trouvé pour la mise à jour du rôle");
                    }
                }
                 else
            {
                Console.WriteLine("Le rôle n'a pas été modifié, aucune mise à jour nécessaire");
                }*/
        }
        catch (DbUpdateConcurrencyException ex)
        {
            if (!UserExists(User.Id))
            {
                Console.WriteLine($"Utilisateur {User.Id} introuvable");
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                Console.WriteLine($"Erreur de concurrence: {ex.Message}");
                throw;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors de la mise à jour: {ex.Message}");
            throw;
        }

        NavigationManager.NavigateTo("/users");
    }

    private bool UserExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Users.Any(e => e.Id == id);
    }
}